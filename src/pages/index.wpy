<style lang="less">
  
  .tabs{
    width: 100%;
  }
  .play-container{
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 100rpx;
    line-height: 100rpx;
    border-top: 1px solid #eee;
    display: flex;
    .img {
      text-align: center;
      padding: 0 20rpx 0 30rpx;
      .image {
        width: 110rpx;
        height: 110rpx;
        border-radius: 50px;
        position: relative;
        top: -30rpx;
        animation: img-active 5s linear infinite;
        
      }
      .pause {
        animation-play-state:paused;
      }
    }
    .content{
      flex: 1;
    }
    .setting, .control{
      width: 60rpx;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 30rpx;
      /deep/ .i-icon{
        font-size: 30rpx;
      }
    }
    .setting {
      margin-left: 30rpx;
    }
    .control {
      margin-right: 30rpx;
    }
  }
  .music-list-container {
    width: 100%;
  }
  .modal-tip {
    margin-top: 3px;
    color: red;
  }
  @keyframes img-active
  {
    from {transform: rotate(0);}
    to {transform: rotate(360deg);}
  }
</style>

<template>
  <view class="container">
    <i-tabs class="tabs" current="{{ currentTab }}" bindchange="handleChangeTabs">
      <i-tab key="people" title="口哨"></i-tab>
      <i-tab key="parrot" title="鹦鹉"></i-tab>
    </i-tabs>
    <view class="music-list-container">
      <i-cell-group>
        <i-cell wx:for="{{ musicList }}" wx:key="{{ index }}" title="{{ item.name }}" @tap="handlePlay({{ item }})">
          <i-icon wx:if="{{ music.src === item.src }}" color="#67c23a" size="20" slot="icon" type="play" />
        </i-cell>
      </i-cell-group>
    </view>
    <view class="play-container" wx:if="{{ music.src }}">
      <view class="img">
        <image class="image {{ music.status ? '' : 'pause' }}" mode="aspectFit" src="{{ music.img }}"></image>
      </view>
      <view class="content">
        {{ music.name }}
      </view>
      <view class="time" wx:if="{{ music.duration }}">
        {{ music.currentTime + ' / ' + music.duration }}
      </view>
      <view class="setting" @tap='handleShowModal'>
        <i-icon type="setup_fill" />
      </view>
      <view wx:if="{{ music.src }}" class="control" @tap="handleChangePlayStatus">
        <i-icon size="22" wx:if="{{ music.status === 0 }}" type="play_fill" />
        <i-icon size="22" wx:else type="suspend" />
      </view>
    </view>
    <i-modal class="modal" title="设置" cancel-text="取消循环" visible="{{ modalVisible }}" bind:ok="handleModalOk" bind:cancel="handleModalCancel">
      <i-input-number value="{{ loop.start }}" min="0" max="{{ music.duration }}" bindchange="handleChangeMusicStart" />
      <i-input-number value="{{ loop.end }}" min="0" max="{{ music.duration }}" bindchange="handleChangeMusicEnd" />
      <view class="modal-tip" wx:if="{{ loop.start === loop.end }}">
        <text>开始时间不能和结束时间相同</text>
      </view>
    </i-modal>
  </view>
</template>

<script>
  import wepy from 'wepy'
  // 云开发数据库相关
  wx.cloud.init()
  const db = wx.cloud.database({env: 'eks'})
  const collection = db.collection('music')

  // 音乐相关
  const audio = wx.getBackgroundAudioManager()

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '口哨丨玄凤鹦鹉虎皮鹦鹉牡丹鹦鹉',
      usingComponents: {
        'i-tabs': '../iview/tabs/index',
        'i-tab': '../iview/tab/index',
        'i-icon': '../iview/icon/index',
        'i-cell-group': '../iview/cell-group/index',
        'i-cell': '../iview/cell/index',
        'i-modal': '../iview/modal/index',
        'i-input-number': '../iview/input-number/index'
      }
    }

    mixins = []

    data = {
      currentTab: 'people',
      musicList: [], // 音乐列表
      music: {
        img: '', // 图片地址
        name: '', // 歌名
        src: '', // 播放地址
        status: 0, // 1 播放 0 暂停
        currentTime: '', // 当前播放时间
        duration: '', // 总时长
        start: 0, // 截取时间-开始时间
        end: 0, // 截取时间-结束时间
        autoLoop: false // 定制循环
      },
      loop: {
        start: 0, // 截取时间-开始时间
        end: 0 // 截取时间-结束时间
      },
      modalVisible: false // modal 开关
    }

    computed = {
    }

    methods = {
      handleChangeTabs ({ detail }) {
        this.currentTab = detail.key
        this.getMusicList(this.currentTab)
      },

      handleChangePlayStatus () {
        this.music.status = (this.music.status + 1) % 2
        if (this.music.status) { // 播放
          audio.play()
        } else {
          audio.pause()
        }
      },

      handlePlay (item) {
        if (this.music.src !== item.src) {
          if (this.music.src) {
            audio.stop()
          }
          audio.title = item.name
          audio.coverImgUrl = item.img
          audio.src = item.src
          audio.title = item.name // 防止没设置到 title
          this.music.name = item.name
          this.music.img = item.img
          this.music.src = item.src
          this.music.status = 1
        }
      },

      handleShowModal () { // 打开 modal
        this.loop.start = this.music.start
        this.loop.end = this.music.end
        this.modalVisible = true
      },

      handleChangeMusicStart ({ detail }) { // 调整开始时间
        this.loop.start = detail.value
        if (this.loop.end < this.loop.start) {
          this.loop.end = this.loop.start
        }
        this.$apply()
      },

      handleChangeMusicEnd ({ detail }) { // 调整结束时间
        this.loop.end = detail.value
        if (this.loop.end < this.loop.start) {
          this.loop
          .start = this.loop.end
        }
        this.$apply()
      },

      handleModalOk () { // 设置了循环时间
        if (this.loop.start === this.loop.end) {
          return false
        }
        this.music.start = this.loop.start
        this.music.end = this.loop.end
        this.music.autoLoop = true
        this.modalVisible = false
      },

      handleModalCancel () {
        this.music.start = 0
        this.music.end = 0
        this.music.autoLoop = false
        this.modalVisible = false
      }
    }

    events = {
    }

    getMusicList (type) {
      collection.where({
        type
      }).get({
        success: (res) => {
          this.musicList = res.data
          this.$apply()
        }
      })
    }

    onLoad() {
      this.getMusicList(this.currentTab)
      audio.onTimeUpdate(() => {
        this.music.currentTime = Math.floor(audio.currentTime)
        this.music.duration = Math.floor(audio.duration)
        if (this.music.autoLoop && (this.music.currentTime >= this.music.end || this.music.currentTime < this.music.start)) { // 开启自动循环
          this.music.currentTime = this.music.start
          audio.seek(this.music.start)
        }
        this.$apply()
      })
      audio.onEnded(() => {
        audio.src = this.music.src
        audio.title = this.music.name
      })
      audio.onStop(() => {
        setTimeout(() => {
          if (!audio.src) {
            this.music.src = ''
            this.music.img = ''
            this.music.name = ''
            this.music.duration = ''
          }
          this.$apply()
        }, 1000)
      })
    }
  }
</script>
